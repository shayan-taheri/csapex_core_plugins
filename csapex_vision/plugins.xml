<library path="libcsapex_vision_plugin_core">
<class type="csapex::RegisterPlugin" base_class_type="csapex::CorePlugin">
  <description></description>
  </class>
</library>


<library path="libcsapex_vision_plugin_node">
<class type="csapex::Scale16BitTo8Bit" base_class_type="csapex::Node">
  <description>Scales a 16 bit image to 8 bits</description>
</class>
<class type="csapex::ScaleCircleMessages" base_class_type="csapex::Node">
  <description>Scales entire CircleMessages</description>
</class>
<class type="csapex::RenderCircles" base_class_type="csapex::Node">
  <description>Renders CicleMessages</description>
</class>
<class type="csapex::ExportCvMatMessageAsCsv" base_class_type="csapex::Node">
  <description>Save a CvMatMassage as .csv file.</description>
</class>
<class type="csapex::MaskBorderFill" base_class_type="csapex::Node">
  <description>Fills a mask from all borders</description>
</class>
<class type="csapex::SetRoiLabel" base_class_type="csapex::Node">
  <description>Set the roi label to a given value</description>
</class>
<class type="csapex::EventAND" base_class_type="csapex::Node">
  <description>Check if two events have happened.</description>
  <tags>Vision</tags>
</class>

<class type="csapex::StaticRoi" base_class_type="csapex::Node">
  <description>Produce static roi matrix.</description>
  <tags>Vision</tags>
</class>
<class type="csapex::GridArrangedRois" base_class_type="csapex::Node">
  <description>Produce vector of grid arranged rois.</description>
  <tags>Vision</tags>
</class>
<class type="csapex::RotateImage" base_class_type="csapex::Node">
  <description>Rotates an image</description>
</class>
<class type="csapex::GrabCut" base_class_type="csapex::Node">
  <description>GrabCut image segmentation</description>
</class>

<class type="csapex::Camera" base_class_type="csapex::Node">
  <description>
    Import image data by a webcam or another camera device.
  </description>
  <tags>Vision, Input</tags>
</class>

<class type="csapex::ImageRoi" base_class_type="csapex::Node">
  <description></description>
  <icon>:/picture.png</icon>
  <tags>Vision, ROI</tags>
</class>

<class type="csapex::Levels" base_class_type="csapex::Node">
  <description>
    Adjust the levels of all color channels in an image.
  </description>
  <tags>Vision, Filter, Levels, White Balance, Auto Levels</tags>
</class>

<class type="csapex::ImagePadding" base_class_type="csapex::Node">
  <description>Adds padding pixels to an image</description>
  <icon>:/border.png</icon>
  <tags>Vision</tags>
</class>

<class type="csapex::BoxBlur" base_class_type="csapex::Node">
  <description>
    Blur an image or a matrix applying a box filter.
  </description>
  <tags>Vision</tags>
</class>
<class type="csapex::MeanStdDev" base_class_type="csapex::Node">
  <description>
    Calculate mean and std deviation of matrix. The result vector
    contains the mean or deviation for each channel.
  </description>
  <tags>Vision</tags>
</class>
<class type="csapex::MeanStdDevNormalization" base_class_type="csapex::Node">
  <description>
    Normalize a matrix given the mean and std deviation.
  </description>
  <tags>Vision</tags>
</class>
<class type="csapex::Row" base_class_type="csapex::Node">
  <description>
    Retrieve a row of a CV matrix.
  </description>
  <tags>Vision</tags>
</class>
<class type="csapex::Col" base_class_type="csapex::Node">
  <description>
    Retrieve a col of a CV matrix.
  </description>
  <tags>Vision</tags>
</class>
<class type="csapex::SetColor" base_class_type="csapex::Node">
  <description>
    Set color in image using a mask.
  </description>
  <tags>Vision</tags>
</class>
<class type="csapex::Reshape" base_class_type="csapex::Node">
  <description>
    Reshape a CV matrix concerning rows and columns.
  </description>
  <tags>Vision</tags>
</class>
<class type="csapex::GradientHistogram" base_class_type="csapex::Node">
  <description>
    Calculate an histogram for a gradient within a certain angular interval.
  </description>
  <tags>Vision</tags>
</class>
<class type="csapex::Gabor" base_class_type="csapex::Node">
  <description>
    Apply the Gabor kernel to an image.
  </description>
  <tags>Vision</tags>
</class>
<class type="csapex::GaussianBlur" base_class_type="csapex::Node">
  <description>
    Blur an image or a matrix applying a gaussian function.
  </description>
  <tags>Vision</tags>
</class>
<class type="csapex::BilateralFilter" base_class_type="csapex::Node">
  <description>
    Apply a bilateral filter to an image.
  </description>
  <tags>Vision</tags>
</class>
<class type="csapex::CopyMakeBorder" base_class_type="csapex::Node">
  <description>
    Add border to image.
  </description>
  <tags>Vision</tags>
</class>
<class type="csapex::MinMaxLoc" base_class_type="csapex::Node">
  <description>
    Get mininma / maxima / indices for these of a matrix.
  </description>
  <tags>Vision</tags>
</class>
<class type="csapex::ColorSegmentation" base_class_type="csapex::Node">
  <description>Allows the user to segment an image based on its channels</description>
  <tags>Vision, Segmentation, Filter</tags>
</class>
<class type="csapex::FilterApplyMask" base_class_type="csapex::Node">
  <description>Applies a mask to an image, turning all masked images to black</description>
  <icon>:/filter.png</icon>
  <tags>Vision, Filter</tags>
</class>

<class type="csapex::FilterStaticMask" base_class_type="csapex::Node">
  <description>Allows the user to generate a static mask</description>
  <icon>:/filter.png</icon>
  <tags>Vision, Filter</tags>
</class>


<class type="csapex::MaskRefinement" base_class_type="csapex::Node">
  <description>Allows the user to refine a mask</description>
  <icon>:/filter.png</icon>
  <tags>Vision, Filter</tags>
</class>


<class type="csapex::HoughCircle" base_class_type="csapex::Node">
  <description>Finds circles in an image</description>
  <tags>Vision</tags>
</class>

<class type="csapex::VectorizePyramid" base_class_type="csapex::Node">
  <description>Convert a CvPyramidMessage to a VectorMessage of CvMatMessages.</description>  
  <tags>Vision</tags>
</class>

<class type="csapex::LoadFilestorage" base_class_type="csapex::Node">
  <description>Load OpenCV file storages containing matrices.</description>
</class>

<class type="csapex::DistanceTransform" base_class_type="csapex::Node">
  <description>OpenCV's distance transform</description>
</class>

  <class type="csapex::ColorConvert" base_class_type="csapex::Node">
    <description>Converts images between color spaces</description>
    <tags>Vision, Filter, Convert</tags>
  </class>
  <class type="csapex::LABToLCh" base_class_type="csapex::Node">
    <description>Convert LAB color space to LCh space.</description>
    <tags>Vision, Filter, Convert</tags>
  </class>
  <class type="csapex::BGRToIlluminationInvariant" base_class_type="csapex::Node">
    <description>Convert BGR color space to illumination invariant space.</description>
    <tags>Vision, Filter, Convert</tags>
  </class>

  <class type="csapex::NewmanIlluminationInvariance" base_class_type="csapex::Node">
    <description>Convert BGR color space to illumination invariant space using Paul Newman's method.</description>
    <tags>Vision, Filter, Convert</tags>
  </class>

  <class type="csapex::YUV422Decoder" base_class_type="csapex::Node">
    <description>Converts a 2 channel YUV422 image into an 3 channel YUV422 image</description>
    <tags>Vision, Filter, Convert</tags>
  </class>
  <class type="csapex::AdaptiveThreshold" base_class_type="csapex::Node">
    <description>Adaptive thresholding</description>
    <tags>Vision, Filter</tags>
  </class>
  <class type="csapex::Merge" base_class_type="csapex::Node">
    <description>Merges multiple images as channels into one image</description>
    <tags>Vision</tags>
  </class>
  <class type="csapex::Split" base_class_type="csapex::Node">
    <description>Splits an image into multiple images, one for each channel</description>
    <tags>Vision</tags>
  </class>
  <class type="csapex::ColorAdjustment" base_class_type="csapex::Node">
    <description>Lightness adjustment and normalization</description>
    <tags>Vision, Filter</tags>
  </class>
  <class type="csapex::GammaCorrection" base_class_type="csapex::Node">
    <description>Gamma Correction using power low and logarithm transformations</description>
    <tags>Vision, Filter</tags>
  </class>
  <class type="csapex::PerspectiveTransform" base_class_type="csapex::Node">
    <description>Transforms an image using a perspective transformation</description>
    <tags>Vision, Filter</tags>
  </class>
  <class type="csapex::LocalPatternsHistogram" base_class_type="csapex::Node">
    <description>Extracts local patterns (binary, ternary) histogram.</description>
    <tags>Vision, Features</tags>
  </class>
  <class type="csapex::LocalPatterns" base_class_type="csapex::Node">
    <description>Extracts local patterns (binary, ternary).</description>
    <tags>Vision, Features</tags>
  </class>
  <class type="csapex::Debayer" base_class_type="csapex::Node">
    <description>Debayering of images</description>
    <icon>:/bayer.png</icon>
    <tags>Vision, Filter</tags>
  </class>
  <class type="csapex::Morpholocial" base_class_type="csapex::Node">
    <description>Different Morphological operators like "open", "close", "tophat", "gradient"</description>
    <tags>Vision, Filter</tags>
  </class>
  <class type="csapex::Magnitude" base_class_type="csapex::Node">
    <description>Calculate the magnitude fo a matrix.</description>
    <tags>Vision, Features</tags>
  </class>
  <class type="csapex::VJDetector" base_class_type="csapex::Node">
    <description>Viola Jones Detector</description>
    <tags>Vision</tags>
  </class>
  <class type="csapex::AssignROIClassification" base_class_type="csapex::Node">
    <description>Assign ROI classifications from classified feature messages.</description>
    <tags>Vision, ROI</tags>
  </class>
  <class type="csapex::AssignROIClassificationMaxVote" base_class_type="csapex::Node">
    <description>Assign ROI classifications from weighted classes.</description>
    <tags>Vision, ROI</tags>
  </class>
  <class type="csapex::EvaluateROIClassification" base_class_type="csapex::Node">
    <description>Evaluate the ROI classifications to build up a confusion matrix.</description>
    <tags>Vision, ROI, Evaluation</tags>
  </class>
  <class type="csapex::EvaluateROIDetections" base_class_type="csapex::Node">
    <description>Evaluate the ROI detections to build up a confusion matrix.</description>
    <tags>Vision, ROI, Evaluation</tags>
  </class>
  <class type="csapex::ExchangeROIClassification" base_class_type="csapex::Node">
    <description>Substitute ROI classification labels.</description>
    <tags>Vision, ROI</tags>
  </class>
  <class type="csapex::FilterROIsByClassification" base_class_type="csapex::Node">
    <description>Filter ROIs based on classification label.</description>
    <tags>Vision, ROI</tags>
  </class>
  <class type="csapex::SetROIClassification" base_class_type="csapex::Node">
    <description>Set the roi classification to a defined label.</description>
    <tags>Vision, ROI</tags>
  </class>
  <class type="csapex::SetROIColorByClassification" base_class_type="csapex::Node">
    <description>Set color for a certain classification.</description>
    <tags>Vision, ROI</tags>
  </class>
  <class type="csapex::RenderROIs" base_class_type="csapex::Node">
    <description>Render ROIs on top of an image</description>
    <tags>Vision, ROI</tags>
  </class>
  <class type="csapex::MergeROIs" base_class_type="csapex::Node">
    <description>Merge overlapping ROIs</description>
    <tags>Vision, ROI</tags>
  </class>
  <class type="csapex::GrowROI" base_class_type="csapex::Node">
    <description>Change the size of a ROI</description>
    <tags>Vision, ROI</tags>
  </class>
  <class type="csapex::GrowROIs" base_class_type="csapex::Node">
    <description>Change the size of a ROI</description>
    <tags>Vision, ROI</tags>
  </class>
  <class type="csapex::ScaleROIs" base_class_type="csapex::Node">
    <description>Scale a vector of ROIs.</description>
    <tags>Vision, ROI</tags>
  </class>
  <class type="csapex::ScaleROI" base_class_type="csapex::Node">
    <description>Scale one ROI.</description>
    <tags>Vision, ROI</tags>
  </class>
  <class type="csapex::FilterROIs" base_class_type="csapex::Node">
    <description>Filter ROIs according to size and ratio.</description>
    <tags>Vision, ROI</tags>
  </class>
  <class type="csapex::ExtractROI" base_class_type="csapex::Node">
    <description>Extracts a subimage according to the given ROI</description>
    <tags>Vision, ROI</tags>
  </class>
  <class type="csapex::ROIHitRate" base_class_type="csapex::Node">
    <description>Calculate the hit rate of groundtruth rois by detection rois.</description>
    <tags>Vision, ROI</tags>
  </class>
  <class type="csapex::vision::PartitionROIsBySize" base_class_type="csapex::Node">
    <description>Partition ROIs by their size.</description>
    <tags>Vision, ROI</tags>
  </class>
  <class type="csapex::vision::ROISizeStatistics" base_class_type="csapex::Node">
    <description>Collect statistics about ROI size</description>
    <tags>Vision, ROI</tags>
  </class>
  <class type="csapex::NumberGenerator" base_class_type="csapex::Node">
    <description>[DEBUG] Generates images containing numbers</description>
    <tags>Vision, Debug</tags>
  </class>
  <class type="csapex::GenericImageCombiner" base_class_type="csapex::Node">
    <description>
        Combine images or matrices by giving an expression that will induce the
        combinatoric operation.
    </description>
    <tags>Vision, Filter, Combiner</tags>
    <icon>:/combiner.png</icon>
  </class>
  <class type="csapex::SetOperation" base_class_type="csapex::Node">
    <description>
        Compare two images using a grid
        overlay. The Feature observed in this case is the mean value of values given
        in a grid cell.
    </description>
    <tags>Vision, Filter</tags>
  </class>
  <class type="csapex::Undistort" base_class_type="csapex::Node">
    <description>
        Undistort and rectify images using given camera parameters.
        A margin parameter enables to gain more image data from the
        undistortion.
    </description>
    <tags>Vision, Filter</tags>
  </class>
  <class type="csapex::CameraCalibration" base_class_type="csapex::Node">
    <description>
        Calibrate a camera by calculating the intrinsic parameters.
        The gained parameters can be used with the 'Undistort'-Plugin.
    </description>
  </class>
  <class type="csapex::Scale" base_class_type="csapex::Node">
    <description>
        Scale images from 1 to 400 percent of the original size.
    </description>
    <tags>Vision</tags>
  </class>
  <class type="csapex::Resize" base_class_type="csapex::Node">
    <description>
        Resize images from 10 to 10000 pixels.
    </description>
    <tags>Vision</tags>
  </class>
  <class type="csapex::Sample" base_class_type="csapex::Node">
    <description>
        Sample images.
    </description>
    <tags>Vision</tags>
  </class>
  <class type="csapex::CornerHarris" base_class_type="csapex::Node">
    <description>
        Make it possible to find corners in an image by appling the harrisCorner function.
        It turns out an grayscale image giving selected border types at extreme gradients.
    </description>
    <tags>Vision</tags>
  </class>
  <class type="csapex::Equalize" base_class_type="csapex::Node">
    <description>
        Do a histogram equalization on each channel of a image.
    </description>
    <tags>Vision, Histogram</tags>
  </class>
  <class type="csapex::ContrastBrightness" base_class_type="csapex::Node">
    <description>
        Adjust contrast and brightness.
    </description>
    <tags>Vision, Histogram</tags>
  </class>
  <class type="csapex::MonoFilter" base_class_type="csapex::Node">
    <description>
        Filter a value range an set other values to defined fix values.
    </description>
    <tags>Vision</tags>
  </class>
  <class type="csapex::Canny" base_class_type="csapex::Node">
    <description>
        Apply the canny edge filter to an image.
    </description>
    <tags>Vision</tags>
  </class>
  <class type="csapex::EigenValsAndVecs" base_class_type="csapex::Node">
    <description>
        Apply the computation of a covariation matrix of derivatives over a neighborhood
        of pixels. Calculate edges with this method.
    </description>
    <tags>Vision</tags>
  </class>
  <class type="csapex::HoughLinesP" base_class_type="csapex::Node">
    <description>
        Search lines in an image by using the probabilistic hough lines function
        of opencv.
    </description>
    <tags>Vision</tags>
  </class>
  <class type="csapex::MatrixToHeatmap" base_class_type="csapex::Node">
    <description>
        Find maxima and minima in matrices and then visualize them.
    </description>
    <tags>Vision</tags>
  </class>
  <class type="csapex::MedianFilter" base_class_type="csapex::Node">
    <description>
        Apply a median filter to a multichannel (1 - 4) image using a specified kernel size.
    </description>
    <tags>Vision, Filter</tags>
  </class>
  <class type="csapex::ConvertType" base_class_type="csapex::Node">
    <description>
        Convert a matrix to a certain data type to make it usable for further algorithms.
    </description>
    <tags>Vision,  Convertion</tags>
  </class>
  <class type="csapex::Flip" base_class_type="csapex::Node">
    <description>
        Flip matrices or images horizontal, vertical or both.
    </description>
    <tags>Vision</tags>
  </class>

    <class type="csapex::Times" base_class_type="csapex::Node">
        <description>
            Multiplies two matrices with cv::multiply and given scale, depth.
        </description>
    <tags>Vision</tags>
    </class>

  <class type="csapex::FlipROIs" base_class_type="csapex::Node">
    <description>
        Flip rois horizontal, vertical or both.
    </description>
    <tags>Vision</tags>
  </class>
  <class type="csapex::Laplacian" base_class_type="csapex::Node">
    <description>
        Apply the laplacian operator to an image.
    </description>
    <tags>Vision</tags>
  </class>
  <class type="csapex::Sobel" base_class_type="csapex::Node">
    <description>
        Apply the Sobel operator to an image.
    </description>
    <tags>Vision</tags>
  </class>
  <class type="csapex::Scharr" base_class_type="csapex::Node">
    <description>
        Apply the Scharr operator to an image.
    </description>
    <tags>Vision</tags>
  </class>
  <class type="csapex::FloatToUchar" base_class_type="csapex::Node">
    <description>
        Convert floating point matrices to uchar matrices.
    </description>
    <tags>Vision, Convertion</tags>
  </class>
  <class type="csapex::SequenceMean" base_class_type="csapex::Node">
    <description>
        Accumulate image or matrix information over a sequence an build the mean out of it.
    </description>
    <tags>Vision</tags>
  </class>
  <class type="csapex::Pyramid" base_class_type="csapex::Node">
    <description>
        Build an 8 level image or matrix pyramid.
    </description>
    <tags>Vision</tags>
  </class>
  <class type="csapex::BinomialFilter" base_class_type="csapex::Node">
    <description>
        Apply the binomial filter to either a matrix or an image.
    </description>
    <tags>Vision, Filter</tags>
  </class>
  <class type="csapex::SumChannels" base_class_type="csapex::Node">
    <description>
        Sum all image or matrix channels and optionally build the mean.
    </description>
    <tags>Vision</tags>
  </class>
  <class type="csapex::LabelRegions" base_class_type="csapex::Node">
    <description>
        Label regions devided by edges.
    </description>
    <tags>Vision</tags>
  </class>
  <class type="csapex::RenderLabels" base_class_type="csapex::Node">
    <description>
        Render labels that where found by the floodfill algorithm.
    </description>
    <tags>Vision</tags>
  </class>
  <class type="csapex::DifferenceMaximum" base_class_type="csapex::Node">
    <description>
        Build the maxmimum difference of neighbouring pixels.
    </description>
    <tags>Vision, Filter</tags>
  </class>
  <class type="csapex::ThresholdNoiseFilter" base_class_type="csapex::Node">
    <description>
        Filter noise by applying a threshold matrix.
    </description>
    <tags>Vision, Filter, Experimental</tags>
  </class>
  <class type="csapex::Normalize" base_class_type="csapex::Node">
    <description>
        Normalize an arbitrary matrix type by applying different norm types.
   </description>
   <tags>Vision, Filter</tags>
  </class>
  <class type="csapex::MatrixStitcher" base_class_type="csapex::Node">
    <description>
        Stitch matrices together using the maximum cols and rows to calculate the
        final matrix size.
   </description>
   <tags>Vision</tags>
  </class>
  <class type="csapex::ImageTextLabel" base_class_type="csapex::Node">
    <description>
        Render some text into an image.
   </description>
   <tags>Vision</tags>
  </class>
  <class type="csapex::HOGDetector" base_class_type="csapex::Node">
    <description>
        Uses HOG features to detect objects. Uses scaled-space-search.
    </description>
    <tags>Vision, HOG</tags>
  </class>
  <class type="csapex::HOGExtractor" base_class_type="csapex::Node">
    <description>
        Extracts HOG features of given ROIs in an image.
    </description>
    <tags>Vision, HOG</tags>
  </class>
  <class type="csapex::HOGClassifier" base_class_type="csapex::Node">
    <description>
        Uses HOG features to extract and classify objects with a given SVM.
    </description>
    <tags>Vision, HOG</tags>
  </class>
  <class type="csapex::HOGChannels" base_class_type="csapex::Node">
    <description>
        Put out the single bin channels of a HOG histogram.
    </description>
    <tags>Vision, HOG</tags>
  </class>
  <class type="csapex::HOGVisualizer" base_class_type="csapex::Node">
    <description>
        Render HOG features.
    </description>
    <tags>Vision, HOG</tags>
  </class>
  <class type="csapex::ACFStandardExtractor" base_class_type="csapex::Node">
    <description>
        Extract ACF features from RGB or mono images.
    </description>
    <tags>Vision, ACF</tags>
  </class>
  <class type="csapex::ACFDynamicExtractor" base_class_type="csapex::Node">
    <description>
        Extract ACF features from RGB or mono images with customizable channels.
    </description>
    <tags>Vision, ACF</tags>
  </class>
  <class type="csapex::vision::ACFDepthChannel" base_class_type="csapex::Node">
    <description>
        Extracts a depth channel feature for ACF.
    </description>
    <tags>Vision, ACF</tags>
  </class>
  <class type="csapex::ClusterBoundaryMask" base_class_type="csapex::Node">
    <description>
        Retrieve the boundaries of clusters as a mask.
    </description>
    <tags>Vision</tags>
  </class>
  <class type="csapex::PreemptiveSLIC" base_class_type="csapex::Node">
    <description>
        Segment image using super pixels.
    </description>
    <tags>Vision</tags>
  </class>
  <class type="csapex::GLCM" base_class_type="csapex::Node">
    <description>
        Calculate the grey-level co-occurrence matrix of a mono image.
    </description>
    <tags>Vision</tags>
  </class>
  <class type="csapex::AssignClusterClass" base_class_type="csapex::Node">
    <description></description>
    <tags>Vision</tags>
  </class>
  <class type="csapex::LabelROIs" base_class_type="csapex::Node">
     <description></description>
     <tags>Vision</tags>
   </class>
   <class type="csapex::ClusterGrid" base_class_type="csapex::Node">
      <description></description>
      <tags>Vision</tags>
    </class>
  <class type="csapex::vision::DepthMask" base_class_type="csapex::Node">
    <description></description>
    <tags>Vision</tags>
  </class>
</library>


<library path="libcsapex_vision_plugin_qt">
<class type="csapex::FilterStaticMaskAdapterBuilder" base_class_type="csapex::NodeAdapterBuilder">
  <description></description>
</class>
<class type="csapex::ImageRoiAdapterBuilder" base_class_type="csapex::NodeAdapterBuilder">
  <description></description>
</class>
<class type="csapex::MaskRefinementAdapterBuilder" base_class_type="csapex::NodeAdapterBuilder">
  <description></description>
<class type="csapex::AssignClusterClassAdapterBuilder" base_class_type="csapex::NodeAdapterBuilder">
  <description></description>
</class>
<class type="csapex::LabelROIsAdapterBuilder" base_class_type="csapex::NodeAdapterBuilder">
  <description></description>
</class>
</class>
</library>

